from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

class StartHandler:
    def __init__(self, bot):
        self.bot = bot

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        userID = update.effective_user.id
        
        if userID == context.bot.config.ADMIN_ID:
            await self.nnstart(update, context)
        elif userID in context.bot.redactors:
            await self.rstart(update, context)
        else:
            await self.nstart(update, context)

    async def nnstart(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞", callback_data="ain_redactoradd")],
            [InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", callback_data="ain_stop")],
            [InlineKeyboardButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="ain_restart")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –°–∞—à–∏ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä—É—Å—Å–∫–∏–π.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /sasha, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –°–∞—à–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /citata, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ —Ü–∏—Ç–∞—Ç—É.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add_citata, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add_redactor, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /stop, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞.",
            reply_markup=reply_markup
        )

    async def rstart(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É", callback_data="rin_add_citata")],
            [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–∏—Ç–∞—Ç—É", callback_data="rin_view_citatas")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        text = (
            "üëã *–ü—Ä–∏–≤–µ—Ç, —Ä–µ–¥–∞–∫—Ç–æ—Ä!*\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "- `/add_citata {—Ç–µ–∫—Å—Ç}` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É.\n"
            "- `/citata` ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É.\n"
        )
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")

    async def nstart(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        text = "üëã –ü—Ä–∏–≤–µ—Ç! *–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –°–∞—à–∏ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä—É—Å—Å–∫–∏–π.*\n" \
               "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É */sasha*, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç *–°–∞—à–∏*.\n" \
               "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É */citata*, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ —Ü–∏—Ç–∞—Ç—É.\n"
        await update.message.reply_text(text, parse_mode="MarkdownV2")