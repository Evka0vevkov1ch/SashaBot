from telegram import Update
from telegram.ext import ContextTypes
from services.redactor_service import RedactorService
from services.file_service import FileService
import random
import logging

class RedactorHandler:
    def __init__(self, redactor_service: RedactorService, file_service: FileService):
        self.redactor_service = redactor_service
        self.file_service = file_service

    async def add_redactor(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        if update.effective_user.id != self.redactor_service.admin_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤.")
            return

        if context.args:
            user_id = context.args[0]

            try:
                self.redactor_service.add_redactor(user_id)
                await update.message.reply_text(f"‚úÖ –†–µ–¥–∞–∫—Ç–æ—Ä —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: {e}")
            return
        elif update.message.reply_to_message:
            user_id = update.message.reply_to_message.from_user.id
            try:
                self.redactor_service.add_redactor(user_id)
                await update.message.reply_text(f"‚úÖ –†–µ–¥–∞–∫—Ç–æ—Ä —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: {e}")
            return
        else:
            await update.message.reply_text(
                "‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã.\n"
                "–ò–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ü—Ä–∏–º–µ—Ä: /add_redactor 123456789"
            )

    async def list_redactors(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        redactors = self.redactor_service.get_redactors()
        if not redactors:
            await update.message.reply_text("‚ùå –ù–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤.")
            return

        redactor_list = "\n".join(str(redactor) for redactor in redactors)
        await update.message.reply_text(f"üìù –°–ø–∏—Å–æ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤:\n{redactor_list}")