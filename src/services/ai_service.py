import requests, logging
class AIService:
    def __init__(self, api_key):
        self.api_key = api_key

    async def get_ai_response(self, text):
        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        json_data = {
            "model": "mistralai/mixtral-8x7b-instruct",
            "messages": [
                {"role": "system", "content": (
                    "–¢—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä—É—Å—Å–∫–∏–π. "
                    "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
                    "–ü–µ—Ä–µ–≤–æ–¥–∏ —Å—É—Ç—å –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –∞–Ω–∞–ª–∏–∑–∞."
                )},
                {"role": "user", "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä—É—Å—Å–∫–∏–π:\n{text}"}
            ],
            "temperature": 0.1  
        }

        try:
            response = requests.post(url, headers=headers, json=json_data)
            response_json = response.json()
            ai_text = response_json.get("choices", [{}])[0].get("message", {}).get("content", "").strip()

            if not ai_text:
                logging.warning("‚ö†Ô∏è OpenRouter –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                return "–Ø –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ –æ–Ω —Å–∫–∞–∑–∞–ª ü§∑‚Äç‚ôÇÔ∏è"

            return ai_text
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ AI: {e}")
            return "–û—à–∏–±–∫–∞ AI, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"