import requests, random, logging, sys, os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, CommandHandler, filters, CallbackContext, CallbackQueryHandler, InlineQueryHandler
from config import TOKEN, sashaID, AIKEY, AdminID
CITATIONS_FILE = "sasha_citates.txt"
REDACTORS = "redactors.txt"

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

API_KEY = AIKEY  
BOT_TOKEN = TOKEN  
TARGET_USER_ID = sashaID  

async def eget_random_line(filename="ad.txt"):
    with open(filename, "r", encoding="utf-8") as file:
        lines = file.readlines()
    return random.choice(lines).strip()
async def get_ai_response(text):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    json_data = {
        "model": "mistralai/mixtral-8x7b-instruct",
        "messages": [
            {"role": "system", "content": (
                "–¢—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä—É—Å—Å–∫–∏–π. "
                "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
                "–ü–µ—Ä–µ–≤–æ–¥–∏ —Å—É—Ç—å –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –∞–Ω–∞–ª–∏–∑–∞."
            )},
            {"role": "user", "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä—É—Å—Å–∫–∏–π:\n{text}"}
        ],
        "temperature": 0.1  
    }

    try:
        response = requests.post(url, headers=headers, json=json_data)
        response_json = response.json()
        ai_text = response_json.get("choices", [{}])[0].get("message", {}).get("content", "").strip()

        if not ai_text:
            logging.warning("‚ö†Ô∏è OpenRouter –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            return "–Ø –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ –æ–Ω —Å–∫–∞–∑–∞–ª ü§∑‚Äç‚ôÇÔ∏è"

        return ai_text
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ AI: {e}")
        return "–û—à–∏–±–∫–∞ AI, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"
async def status_command(update: Update, context: CallbackContext):
    await update.message.reply_text("ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
async def sasha_command(update: Update, context: CallbackContext):
    message = update.message
    reklama = await eget_random_line()
    if not message.reply_to_message:
        await message.reply_text(f"‚ùå –¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –°–∞—à–∏!\n\n\n–†–ï–ö–õ–ê–ú–ê\n{reklama}")
        return
    
    replied_message = message.reply_to_message

    if replied_message.from_user.id != TARGET_USER_ID:
        await message.reply_text(f"‚ùå –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –°–∞—à–∏!\n\n\n–†–ï–ö–õ–ê–ú–ê\n{reklama}")
        return

    text = replied_message.text
    if not text:
        await message.reply_text(f"‚ùå –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞!\n\n\n–†–ï–ö–õ–ê–ú–ê\n{reklama}")
        return

    ai_response = await get_ai_response(text)
    reply_text = f"üí¨ –°–∞—à–∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∏–º–µ–ª –≤ –≤–∏–¥—É:\n\n{ai_response}\n\n\n–†–ï–ö–õ–ê–ú–ê\n{reklama}"
    await update.message.reply_text(reply_text)
async def get_random_line(filename="sasha_citates.txt"):
    with open(filename, "r", encoding="utf-8") as file:
        lines = file.readlines()
    return random.choice(lines).strip()
async def citata_sash(update: Update, context: CallbackContext):
    random_citata = await get_random_line()
    reklama = await eget_random_line()
    if not random_citata:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Ü–∏—Ç–∞—Ç –ø—É—Å—Ç.")
        return
    await update.message.reply_text(f"–ö–∞–∫ –≥–æ–≤–æ—Ä–∏–ª –≤–µ–ª–∏–∫–∏–π –°–∞—à–∞...\n\n{random_citata}\n\n\n\n–†–ï–ö–õ–ê–ú–ê:\n{reklama}")
def load_redactors(filename="redactors.txt"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(filename, "r", encoding="utf-8") as file:
            return [int(line.strip()) for line in file if line.strip().isdigit()]
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤: {e}")
        return []
async def add_citata(update: Update, context: CallbackContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ü–∏—Ç–∞—Ç—É –≤ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add_citata {—Ç–µ–∫—Å—Ç}."""
    redactors = load_redactors()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤
    reklama = await eget_random_line()
    if update.effective_user.id not in redactors:
        await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç.\n\n\n–†–ï–ö–õ–ê–ú–ê\n{reklama}")
        return

    if context.args:
        
    
        citata = " ".join(context.args)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É

        try:
            with open(CITATIONS_FILE, "a", encoding="utf-8") as file:
                file.write(citata + "\n")

            await update.message.reply_text(f"‚úÖ –¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n\n–†–ï–ö–õ–ê–ú–ê\n{reklama}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {e}\n\n\n–†–ï–ö–õ–ê–ú–ê\n{reklama}")
            
    elif update.message.reply_to_message:
        if update.message.reply_to_message.from_user.id != sashaID:
            await update.message.reply_text(f"‚ùå–≠—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –°–∞—à–∏.\n\n\n–†–ï–ö–õ–ê–ú–ê\n{reklama}")    
            return
        citata = update.message.reply_to_message.text
        try:
            with open(CITATIONS_FILE, "a", encoding="utf-8") as file:
                file.write(citata + "\n")

            await update.message.reply_text(f"‚úÖ –¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n\n–†–ï–ö–õ–ê–ú–ê\n{reklama}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {e}\n\n\n–†–ï–ö–õ–ê–ú–ê\n{reklama}")
    else:
        await update.message.reply_text(
            "‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–∏—Ç–∞—Ç–æ–π.\n"
            f"–ò–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Å —Ç–µ–∫—Å—Ç–æ–º —Ü–∏—Ç–∞—Ç—ã.\n–ü—Ä–∏–º–µ—Ä: /add_citata —Ç–µ–∫—Å—Ç\n\n\n–†–ï–ö–õ–ê–ú–ê\n{reklama}"
        )
        return                    
async def stop_command(update: Update, context: CallbackContext) -> None:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É)."""
    if update.effective_user.id != AdminID:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞.")
        return

    await update.message.reply_text("üõë –ë–æ—Ç –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è...")
    logging.info("üõë –ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    sys.exit(0)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
async def nnstart(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞", callback_data="ain_redactoradd")],
        [InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", callback_data="ain_stop")],
        [InlineKeyboardButton("–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="ain_restart")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –°–∞—à–∏ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä—É—Å—Å–∫–∏–π.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /sasha, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –°–∞—à–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /citata, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ —Ü–∏—Ç–∞—Ç—É.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add_citata, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add_redactor, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /stop, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞.",
        
        reply_markup=reply_markup
    )
async def redactorstarthandler(update: Update, context: CallbackContext):
    query = update.callback_query
    chatid = update.effective_user.id  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –≤ Telegram
    
    if query.data == "rin_add_citata":
        await query.edit_message_text("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_citata.")
    elif query.data == "rin_view_citatas":
        random_citata = await get_random_line()
        if not random_citata:
            return
        await context.bot.send_message(chat_id=chatid, text=f"–ö–∞–∫ –≥–æ–≤–æ—Ä–∏–ª –≤–µ–ª–∏–∫–∏–π –°–∞—à–∞...\n\n{random_citata}")
async def handle_admin_buttons(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –≤ Telegram

    if query.data == "ain_redactoradd":
        await query.edit_message_text("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_redactor.")
    elif query.data == "ain_stop":
        await stop_command(update, context) 
    elif query.data == "ain_restart":
        await query.edit_message_text("üõë –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        logging.info("üõë –ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        os.execv(sys.executable, ['python'] + sys.argv)  
async def rstart(update: Update, context: CallbackContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã /start."""
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É", callback_data="rin_add_citata")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–∏—Ç–∞—Ç—É", callback_data="rin_view_citatas")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "üëã *–ü—Ä–∏–≤–µ—Ç, —Ä–µ–¥–∞–∫—Ç–æ—Ä!*\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- `/add_citata {—Ç–µ–∫—Å—Ç}` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É.\n"
        "- `/citata` ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É.\n"
    )
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")
async def start(update: Update, context: CallbackContext):
    userID = update.effective_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    if userID == AdminID:
        await nnstart(update, context)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    #elif userID in load_redactors():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ userID –≤ —Å–ø–∏—Å–∫–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤
        #await rstart(update, context)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    else:
        await nstart(update, context)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
async def nstart(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    text="üëã –ü—Ä–∏–≤–µ—Ç\\! *–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –°–∞—à–∏ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä—É—Å—Å–∫–∏–π\.*\n" \
     "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É */sasha*, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç *–°–∞—à–∏*\.\n" \
     "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É */citata*, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ —Ü–∏—Ç–∞—Ç—É\.\n" \
        
    await update.message.reply_text(text, parse_mode="MarkdownV2")
async def add_redactor(update: Update, context: CallbackContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    if update.effective_user.id != AdminID:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤.")
        return

    if context.args:
        user_id = context.args[0]  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

        try:
            with open("redactors.txt", "a", encoding="utf-8") as file:
                file.write(str(user_id) + "\n")  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ —Å—Ç—Ä–æ–∫—É

            await update.message.reply_text(f"‚úÖ –†–µ–¥–∞–∫—Ç–æ—Ä —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: {e}")
        return
    elif update.message.reply_to_message:
        user_id = update.message.reply_to_message.from_user.id
        try:
            with open("redactors.txt", "a", encoding="utf-8") as file:
                file.write(str(user_id) + "\n")  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ —Å—Ç—Ä–æ–∫—É

            await update.message.reply_text(f"‚úÖ –†–µ–¥–∞–∫—Ç–æ—Ä —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: {e}")
        return
    else:
        await update.message.reply_text(
            "‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã.\n"
            "–ò–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ü—Ä–∏–º–µ—Ä: /add_redactor 123456789"
        )
        return
async def get_username_by_chat_id(chat_id: int, context: CallbackContext) -> str:
    try:
        chat = await context.bot.get_chat(chat_id)
        return chat.username or chat.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return "–û—à–∏–±–∫–∞"
def create_file_if_not_exists(filename):
    open(filename, "a").close()
async def delete_message(update: Update, context: CallbackContext) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    if update.message.reply_to_message:
        try:
            chat_id = update.message.chat_id
            message_id = update.message.reply_to_message.message_id
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        print("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")



def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    redactors = (load_redactors())
    
    app.add_handler(CommandHandler("status", status_command, filters=filters.ChatType.PRIVATE))
    app.add_handler(CommandHandler("sasha", sasha_command))
    app.add_handler(CommandHandler("citata", citata_sash))
    app.add_handler(CommandHandler("add_citata", add_citata))
    app.add_handler(CommandHandler("start", start, filters=filters.ChatType.PRIVATE))
    app.add_handler(CommandHandler("add_redactor", add_redactor, filters=filters.ChatType.PRIVATE))
    app.add_handler(CommandHandler("stop", stop_command, filters= filters.User(AdminID) & filters.ChatType.PRIVATE))
    app.add_handler(CommandHandler("delete_message", delete_message, filters=filters.User(AdminID)))
    
    app.add_handler(CallbackQueryHandler(handle_admin_buttons, pattern="ain_.*")) 
    app.add_handler(CallbackQueryHandler(redactorstarthandler, pattern="rin_.*"))
    
    create_file_if_not_exists(CITATIONS_FILE)
    create_file_if_not_exists(REDACTORS)
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
if __name__ == "__main__":
    main()
